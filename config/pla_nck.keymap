#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MEH LC(LS(LALT))
#define HYPER LC(LS(LA(LGUI)))

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

#define MACRO(name, keys)                 \
name: name##_macro {                      \
    label          = #name;               \
    compatible     = "zmk,behavior-macro";\
    tap-ms         = <40>;                \
    wait-ms        = <40>;                \
    #binding-cells = <0>;                 \
    bindings       = <keys>;              \
};

/ {
    macros {
        MACRO(vim_q,  &kp COLON &kp Q &kp EXCL)
        MACRO(vim_s,  &kp COLON &kp X)
        MACRO(dir_up, &kp DOT &kp DOT &kp FSLH)

        equal_arrow: equal_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN &kp SPACE>;
            label = "EQUAL_ARROW";
        };

        right_arrow: minus_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN &kp SPACE>;
            label = "MINUS_ARROW";
        };

        go_assign: go_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL &kp SPACE>;
            label = "GO_ASSIGN";
        };

        left_arrow: left_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp MINUS &kp SPACE>;
            label = "LEFT_ARROW";
        };

        not_equal: not_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCLAMATION &kp EQUAL>;
            label = "NOT_EQUAL";
        };
    };
};

/ {
    behaviors {
        HRM: HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
            hold-trigger-on-release;
        };

        HMLT: HMLT {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <190>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };

        HMLT2: HMLT2 {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLT2";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <215>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <19 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_ {
            bindings = <
&kp CAPSLOCK   &kp Q        &kp W        &HMLT2 6 E    &HMLT2 3 R     &kp T            &kp Y          &HMLT2 1 U     &HMLT2 2 I    &kp O        &kp P           &kp UNDERSCORE
&kp TAB        &HRM LGUI A  &HRM LALT S  &HRM LCTRL D  &HRM LSHIFT F  &kp G            &kp H          &HRM LSHIFT J  &HRM LCTRL K  &HRM LALT L  &HRM LGUI SEMI  &kp BACKSPACE
&kp ESCAPE     &kp Z        &kp X        &kp C         &kp V          &kp B            &kp N          &kp M          &kp COMMA     &kp PERIOD   &kp FSLH        &kp BACKSLASH
&HMLT 7 TILDE  &trans       &trans       &trans        &HMLT 4 TAB    &HMLT 3 SPACE    &HMLT 1 ENTER  &HMLT 5 DEL    &trans        &trans       &trans          &HMLT 7 F18
            >;
        };

        num {
            bindings = <
&kp ASTERISK  &kp PERCENT  &kp N9  &kp N8  &kp N7  &kp PLUS     &trans    &trans                &trans         &trans                     &trans        &trans
&kp BSLH      &kp SQT      &kp N6  &kp N5  &kp N4  &kp MINUS    &kp LEFT  &HRM LEFT_SHIFT DOWN  &HRM UP LCTRL  &HRM LEFT_ALT RIGHT_ARROW  &kp LEFT_GUI  &trans
&trans        &kp GRAVE    &kp N3  &kp N2  &kp N1  &kp EQUAL    &trans    &trans                &trans         &trans                     &trans        &trans
&trans        &trans       &trans  &trans  &trans  &kp N0       &trans    &trans                &trans         &trans                     &trans        &trans
            >;
        };

        sym {
            bindings = <
&trans  &trans             &kp LEFT_PARENTHESIS  &kp ASTERISK  &kp AMPERSAND    &kp PLUS                 &trans    &trans    &trans  &trans     &trans    &trans
&trans  &kp DOUBLE_QUOTES  &kp CARET             &kp PERCENT   &kp DOLLAR       &kp UNDERSCORE           &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp LGUI  &trans
&trans  &kp TILDE          &kp HASH              &kp AT_SIGN   &kp EXCLAMATION  &kp PLUS                 &trans    &trans    &trans  &trans     &trans    &trans
&trans  &trans             &trans                &trans        &trans           &kp RIGHT_PARENTHESIS    &trans    &trans    &trans  &trans     &trans    &trans
            >;
        };

        nav {
            bindings = <
&trans     &kp LG(Q)  &trans     &trans     &trans     &trans           &trans     &trans    &trans   &trans     &trans  &trans
&kp LG(F)  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &kp LG(LS(F))    &kp LEFT   &kp DOWN  &kp UP   &kp RIGHT  &trans  &trans
&kp LG(A)  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(LS(Z))    &kp PG_UP  &kp HOME  &kp END  &kp PG_DN  &trans  &trans
&trans     &trans     &trans     &trans     &trans     &trans           &trans     &trans    &trans   &trans     &trans  &trans
            >;
        };

        Fn {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans    &trans    &trans     &trans     &trans    &trans  &trans  &trans   &trans   &trans   &trans
            >;
        };

        media {
            bindings = <
&trans  &trans        &trans        &trans        &trans             &bt BT_CLR         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &kp K_MUTE    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans             &trans             &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        code {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &kp DEL               &kp BSPC               &kp LBKT        &kp RBKT         &trans
&trans  &trans  &trans  &trans  &trans  &trans    &not_equal  &go_assign            &left_arrow            &right_arrow    &equal_arrow     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans                &trans                 &trans          &trans           &trans
            >;
        };

        danger {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &bootloader    &bootloader  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans         &trans       &trans  &trans  &trans  &trans  &trans
            >;
        };

        test_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R              &kp T      &kp CAPSLOCK    &kp F18        &kp Y              &kp U          &kp I         &kp O        &kp P
&HRM LGUI A  &HRM LALT S  &HRM LCTRL D  &HRM LEFT_SHIFT F  &kp G      &trans          &trans         &kp H              &HRM LSHIFT J  &HRM LCTRL K  &HRM LALT L  &HRM LCMD SEMI
&kp Z        &kp X        &kp C         &kp V              &kp B      &trans          &trans         &kp N              &kp M          &kp COMMA     &kp DOT      &kp FSLH
&trans       &trans       &trans        &trans             &kp SPACE  &HMLT 0 TAB     &HMLT 0 ENTER  &HMLT 0 BACKSPACE  &trans         &trans        &trans       &trans
            >;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <8 8>;
            then-layer = <8>;
        };
    };
};
